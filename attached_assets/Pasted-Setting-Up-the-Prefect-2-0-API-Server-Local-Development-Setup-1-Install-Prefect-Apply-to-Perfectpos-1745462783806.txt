Setting Up the Prefect 2.0 API Server
Local Development Setup
1. Install Prefect
Apply to Perfectpost....
Run
pip install prefect
2. Start the Prefect API Server
Apply to Perfectpost....
Run
# Start with SQLite (simplest for development)
prefect server start

# You should see output like:
# Prefect API server has started at http://127.0.0.1:4200/api
# Dashboard available at http://127.0.0.1:4200
3. Configure Your Application to Use the API
Apply to Perfectpost....
Run
# Set environment variables in your terminal
export PREFECT_API_URL="http://127.0.0.1:4200/api"

# Or in your .env file
PREFECT_API_URL=http://127.0.0.1:4200/api
PostgreSQL Setup (Recommended for Production)
1. Install Dependencies
Apply to Perfectpost....
Run
pip install prefect psycopg2-binary
2. Create PostgreSQL Database
Apply to Perfectpost....
Run
# Using psql
psql -U postgres -c "CREATE DATABASE prefect;"
psql -U postgres -c "CREATE USER prefect WITH PASSWORD 'prefectpass';"
psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE prefect TO prefect;"
3. Configure Prefect to Use PostgreSQL
Apply to Perfectpost....
Run
# Create a profile for PostgreSQL
prefect profile create postgresql-profile

# Configure database connection
prefect config set PREFECT_API_DATABASE_CONNECTION_URL="postgresql+asyncpg://prefect:prefectpass@localhost:5432/prefect"

# Set as active profile
prefect profile use postgresql-profile
4. Start the Prefect API Server
Apply to Perfectpost....
Run
prefect server start
Docker Compose Setup (Production-Ready)
1. Create Docker Compose File
Apply to Perfectpost....
Run
cat > docker-compose.prefect.yml << EOL
version: '3.8'
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefectpass
      POSTGRES_DB: prefect
    volumes:
      - prefect_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefect"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - prefect_network

  prefect-api:
    image: prefecthq/prefect:2.13-python3.10
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect:prefectpass@postgres:5432/prefect
      - PREFECT_API_URL=http://0.0.0.0:4200/api
    ports:
      - "4200:4200"
    command: prefect server start --host 0.0.0.0
    networks:
      - prefect_network

networks:
  prefect_network:

volumes:
  prefect_postgres_data:
EOL
2. Launch the Prefect API and Database
Apply to Perfectpost....
Run
docker-compose -f docker-compose.prefect.yml up -d
Integration with Your ML Prompt Optimization Platform
1. Environment Configuration
Apply to Perfectpost....
Run
# .env file
DATABASE_URL=postgresql://promptopt:devpassword@postgres:5432/promptopt
PREFECT_API_URL=http://prefect-api:4200/api  # For internal Docker network
PREFECT_EXTERNAL_API_URL=http://localhost:4200/api  # For external access
2. Create a Prefect Agent Service
Add to your existing Docker Compose:
Apply to Perfectpost....
services:
  # ... existing services
  
  prefect-agent:
    build: .  # Use your application image
    depends_on:
      prefect-api:
        condition: service_started
    environment:
      - PREFECT_API_URL=http://prefect-api:4200/api
      - DATABASE_URL=postgresql://promptopt:devpassword@postgres:5432/promptopt
    command: prefect agent start -p default-agent-pool
    networks:
      - prompt_optimizer_network
      - prefect_network
    volumes:
      - ./:/app  # Mount your code

networks:
  prefect_network:
    external: true  # Connect to the Prefect network
3. Verify API Connection
Apply to Perfectpost....
Run
# From your application container
docker-compose exec api python -c "from prefect.client import get_client; async def test(): client = await get_client(); workspaces = await client.read_workspaces(); print(workspaces); import asyncio; asyncio.run(test())"
4. Register Your Flow
Apply to Perfectpost....
# src/flows/register_flow.py
from prefect.deployments import Deployment
from src.flows.prompt_optimization_flow import prompt_optimization_flow

# Create deployment
deployment = Deployment.build_from_flow(
    flow=prompt_optimization_flow,
    name="prompt-optimizer-deployment",
    version="1.0"
)

if __name__ == "__main__":
    deployment.apply()
Apply to Perfectpost....
Run
# Run the registration
docker-compose exec api python -m src.flows.register_flow
5. Accessing the UI
The Prefect UI will be available at http://localhost:4200
This setup provides you with a robust Prefect API server for both development and production use, properly integrated with your ML prompt optimization platform.