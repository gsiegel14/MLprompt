Setting Up PostgreSQL with Prefect 2.0
. Install PostgreSQL
# Create a docker-compose.yml file
cat > docker-compose.yml << EOL
version: '3.8'
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefectpass
      POSTGRES_DB: prefect
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  postgres_data:
EOL

# Start PostgreSQL
docker-compose up -d
# Ubuntu/Debian
sudo apt update
sudo apt install postgresql postgresql-contrib

# Start service
sudo systemctl enable postgresql
sudo systemctl start postgresql

# Create database and user
sudo -u postgres psql -c "CREATE USER prefect WITH PASSWORD 'prefectpass';"
sudo -u postgres psql -c "CREATE DATABASE prefect OWNER prefect;"
# Ubuntu/Debian
sudo apt update
sudo apt install postgresql postgresql-contrib

# Start service
sudo systemctl enable postgresql
sudo systemctl start postgresql

# Create database and user
sudo -u postgres psql -c "CREATE USER prefect WITH PASSWORD 'prefectpass';"
sudo -u postgres psql -c "CREATE DATABASE prefect OWNER prefect;"
pip install prefect psycopg2-binary

# Create Prefect profile with PostgreSQL backend
prefect profile create postgresql-profile

# Configure the profile to use PostgreSQL
prefect config set PREFECT_API_DATABASE_CONNECTION_URL="postgresql+asyncpg://prefect:prefectpass@localhost:5432/prefect"

# Set this profile as active
prefect profile use postgresql-profile

# Start the Prefect server with PostgreSQL backend
prefect server start

# Database for application data
DATABASE_URL=postgresql://promptopt:devpassword@localhost:5432/promptopt

# Prefect PostgreSQL connection
PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect:prefectpass@localhost:5432/prefect
PREFECT_API_URL=http://127.0.0.1:4200/api


# prefect_deployment.py
from prefect.deployments import Deployment
from prefect.infrastructure.docker import DockerContainer
from src.flows.prompt_optimization_flow import prompt_optimization_flow

# Define Docker container infrastructure
docker_infra = DockerContainer(
    image="your-project-image:latest",
    env={"DATABASE_URL": "postgresql://promptopt:devpassword@postgres:5432/promptopt"},
    network_mode="prompt_optimizer_network"
)

# Create deployment
deployment = Deployment.build_from_flow(
    flow=prompt_optimization_flow,
    name="prompt-optimizer",
    infrastructure=docker_infra,
)

if __name__ == "__main__":
    deployment.apply()

    # docker-compose.yml
version: '3.8'
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: mypassword
      POSTGRES_USER: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - prompt_optimizer_network

  prefect:
    image: prefecthq/prefect:2.13-python3.10
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:mypassword@postgres:5432/prefect
      - PREFECT_API_URL=http://0.0.0.0:4200/api
    ports:
      - "4200:4200"
    command: prefect server start --host 0.0.0.0
    networks:
      - prompt_optimizer_network

  api:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      prefect:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://postgres:mypassword@postgres:5432/prompt_optimizer
      - PREFECT_API_URL=http://prefect:4200/api
    ports:
      - "8000:8000"
    networks:
      - prompt_optimizer_network

networks:
  prompt_optimizer_network:

volumes:
  postgres_data: