nstructions for LLM to Build Prompt Optimization Framework
I'd like you to help build the code framework for a prompt optimization platform based on the architectural design in ML implementation.md.
Task Overview
Create the core implementation files needed to build a working framework for a 5-step prompt optimization workflow using Prefect, Vertex AI, and Hugging Face Evaluate. Focus on creating functional but minimal implementations that demonstrate the architecture.
First Priority Files to Create
Please implement these files in the following order:
src/flows/prompt_optimization_flow.py - Complete implementation with all tasks and main flow
src/app/models/prompt_state.py - PromptState model with GCS save/load methods
src/app/clients/vertex_client.py - Vertex AI client with batch_predict and generate_response
src/app/clients/hf_evaluator.py - HuggingFace evaluation service
src/api/models.py - Pydantic models for API requests/responses
src/api/endpoints/inference.py - FastAPI endpoints for inference
src/api/endpoints/prompts.py - FastAPI endpoints for prompt management
src/api/endpoints/experiments.py - FastAPI endpoints for experiments
src/app/main.py - FastAPI application with all routers connected
Implementation Guidelines
Each file should include proper imports, docstrings, and type hints
For external APIs (Vertex, Hugging Face), include stub implementations with appropriate comments
Implement error handling for common failure cases
For storage operations, use Google Cloud Storage via the gcsfs library
Include sample data structures and example returns for clarity
Each task in the Prefect flow should have appropriate retries and logging
Connect the Prefect flow to the FastAPI endpoints via appropriate services
Technical Requirements
The PromptState model should support versioning and JSON serialization/deserialization
The Vertex client should format messages according to the Gemini API requirements
The HF evaluator should use the evaluate library with default metrics
The Prefect flow should support loading state from previous runs
API endpoints should follow the structure in APIinfo.md
When presenting your solutions, include any necessary utility functions and explain key implementation decisions.